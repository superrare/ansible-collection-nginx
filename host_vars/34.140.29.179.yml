# Enable creating dynamic templated NGINX HTTP configuration files.
# Defaults will not produce a valid configuration. Instead they are meant to showcase
# the options available for templating. Each dictionary in the top level list/array represents a new configuration file.
# Unless otherwise noted, all variables are *strings* and *optional* (*required* values inside a dictionary are only required if the top level variable is defined).
# Most (not all) of these directives can also be used under the 'server' and 'location' contexts, as briefly seen at the end of the below dictionary.
nginx_config_http_template_enable: true
nginx_config_http_template:
  - template_file: http/default.conf.j2
    deployment_location: /etc/nginx/conf.d/default.conf
    backup: true
    config:
      core:  # Configure NGINX HTTP core directives
        error_page:  # Dictionary or a list of dictionaries
          - code:  # Required number -- Number or a list of numbers
              - 404
            response: 404
            uri: /404.html  # Required
      servers:  # All previous modules are also available (when allowed) in the 'servers' and 'locations' contexts.
        - core:
            server_name: terraform-db2d4.superrare.co  # String or a list of strings -- Available only in the 'server' context
            listen:  # Available only in the 'server' context
            - address: '[::]' # Can also be a unix path
              port: 443
              ssl: true
              http2: true
              default_server: true
            - address: 0.0.0.0 # Can also be a unix path
              port: 443
              ssl: true
              http2: true
              default_server: true
          ssl:
            certificate: /etc/ssl/certs/nginx-selfsigned.pem
            certificate_key: /etc/ssl/private/nginx-selfsigned.pem
            # I think the server name goes here
          locations:
            ### Forward all requests to the ipfs node, serving images on the internal ip port 8080
            - location: /
              proxy:
                pass: http://10.132.0.39:8080
            ### Use this format to 404 an IPFS ID
            - location: ^~ /ipfs/Qmau322MS7V9U2C4K1Sq2gRudf75cUuzoDacxp5KMCHij3
              core:
                error_page:
                  code: 404
                  response: 404
                  uri: /404.html
          ### To be implements in a pretty fashion like this :) 
          blockCIDs:
            - CID: ^~ /QmASDsdfkasdfljsa/
            - CID: ^~ /TRRTER/
